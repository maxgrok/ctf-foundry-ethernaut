// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console2} from "forge-std/Test.sol";
import {playerScript, CoinFlipExploit} from "./CoinFlipExploit.sol";
import {CoinFlipFactory} from "./CoinFlipFactory.sol";

contract CoinFlipExploitTest is Test {
    address playerAddr = makeAddr("player");
    CoinFlipFactory factory;
    address instanceAddr;

    function setUp() public {
        vm.deal(playerAddr, 1 ether);
        factory = new CoinFlipFactory();
        instanceAddr = factory.createInstance(playerAddr);
    }

    modifier solveChecker() {
        emit log_address(playerAddr);
        vm.startPrank(playerAddr, playerAddr);
        _;
        vm.stopPrank();
        assertTrue(factory.validateInstance(payable(instanceAddr), playerAddr), "Invalid Instance");
    }

    function testExploitSolidity() public solveChecker {
        playerScript(instanceAddr, vm);
    }

    // function testExploitVyper() public solveChecker {
    //     address exploitAddr = deployCode("src/Ethernaut/CoinFlip/CoinFlipExploit.vy");
    //     for (uint256 i = 0; i < 10; i++) {
    //         vm.roll(i + 10);
    //         (bool success,) = exploitAddr.call(abi.encodeWithSignature("exploit(address)", instanceAddr));
    //         require(success);
    //     }
    // }
}
